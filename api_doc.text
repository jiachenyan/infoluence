API Docs

POST  /users.json 
	# create user
	# data: [password, password_confirmation, name, username]
	# on success => user object
		{
			"name": string,
			"username": string,
			"avatarThumb": string,
			"avatarMedium": string,

			"totalRdInf": int,
			"totalShInf": int,
			"totalShares": int,
			"totalPosts": int,

			"regTime ": int,
			"followStatus": boolean // null when not signed in
		}
	# on error => {"errors": [string]}

PUT   /user.json 
	# update user
	# data: [old_password, password, password_confirmation, name, username]
	# old password required to change password
	# on success => user object
	# on error => {"errors": [string]}

PATCH /user.json
	# update user avatar
	# todo

GET   /:username.json
	# => user object


POST  /user/login.json
	# login
	# data: [login, password]

PUT   /user/logout.json
	# logout

PUT   /user/follow/:username.json
	# follow/unfollow user
	# on success => follow status
		{
			"username": string,
			"following": boolean
		}
	# on error => {"errors": [string]}


POST  /posts.json
	# create post
	# data: [content]
	# on success => post object
		{
			"infId": int,
			"infType": string, // oc only
			"content": {
				"type": string,
				"data": [{}]
			},
			"totalReads": int,
			"totalShares": int,
			"createTime": int,
			"publishTime": int, // createTime == publishTime

			"author": {
				"name": string,
				"username": string,
				"avatarThumb": string,
				"avatarMedium": string,

				"totalRdInf": int,
				"totalShInf": int,
				"totalShares": int,
				"totalPosts": int,

				"regTime ": int,
				"followStatus": boolean // null when not signed in
			},

			"publisher": { // same as author
				"name": string,
				"username": string,
				"avatarThumb": string,
				"avatarMedium": string,

				"totalRdInf": int,
				"totalShInf": int,
				"totalShares": int,
				"totalPosts": int,

				"regTime ": int,
				"followStatus": boolean // null when not signed in
			 }

			 // types: 'oc', 'rd', 'sh'
			 "graphData": [infId, type, fromInfId] // null fromInfId when type == 'oc'
		}
	# on error => {"errors": [string]}

GET   /post/:id.json
	# post detail
	# => post object same as above

POST  /post/share/:from_inf_id
	# share post
	# => post object same as above


GET   /posts/:page.json # timeline
	# => post object array
	[{
		"infId": int,
		"infType": string, // oc, sh
		"content": {
			"type": string,
			"data": [{}]
		},
		"totalReads": int,
		"totalShares": int,
		"createTime": int,
		"publishTime": int,

		"author": {
			"name": string,
			"username": string,
			"avatarThumb": string,
			"avatarMedium": string,

			"totalRdInf": int,
			"totalShInf": int,
			"totalShares": int,
			"totalPosts": int,

			"regTime ": int,
			"followStatus": boolean // null when not signed in
		},

		"publisher": { 
			"name": string,
			"username": string,
			"avatarThumb": string,
			"avatarMedium": string,

			"totalRdInf": int,
			"totalShInf": int,
			"totalShares": int,
			"totalPosts": int,

			"regTime ": int,
			"followStatus": boolean // null when not signed in
		 },

		 // types: 'oc', 'rd', 'sh'
		 "graphData": [infId, type, fromInfId] // null fromInfId when type == 'oc'
	}]

GET   /posts/following/:page.json # timeline
	# => post object array same as above


