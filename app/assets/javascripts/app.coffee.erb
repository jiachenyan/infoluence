
seed = angular.module('Infoluence', [

	'ui.router'
	'templates'
	'angularMoment'
	'infinite-scroll'
	'UUID'
	'ct.ui.router.extras.previous'
	#'d3'

])


angular.module('Infoluence').directive 'preventDefault', ->
  
  restrict: 'A'
  link: (scope, elem, attrs) ->
    if attrs.ngClick or attrs.href == '' or attrs.href == '#'
      elem.on 'click', (e) ->
        e.preventDefault()
        return
    return

angular.module('Infoluence').directive 'enterSubmit', ->

 restrict: 'A'
 link: (scope, elem, attrs) ->
  elem.bind 'keydown', (event) ->
   code = event.keyCode or event.which
   if code == 13
    if event.ctrlKey
     event.preventDefault()
     scope.$apply attrs.enterSubmit
   return
  return



  

angular.module('Infoluence').directive 'ngEnter', ->
  (scope, element, attrs) ->
    element.bind 'keydown keypress', (event) ->
      if event.which == 13
        scope.$apply ->
          scope.$eval attrs.ngEnter
          return
        event.preventDefault()
      return
    return

angular.module('Infoluence').directive 'ngBackspace', ->
  {
    restrict: 'A'
    scope: ngBackspace: '&'
    link: (scope, elem, attrs) ->
      elem.bind 'keyup', (event) ->
        if event.which != 8
          return
        scope.$apply ->
          if scope.ngBackspace
            try
              scope.ngBackspace()
            catch err
              console.warn err
          return
        return
      return

  }
  
angular.module('Infoluence').filter 'abs', ->
 (val) ->
  Math.abs val

angular.module('Infoluence').filter 'proNum', [
 '$filter'
 ($filter) ->
  (val) ->
   if Math.abs(val) < 1
    if val > 0
     val = "+#{val.toString()}"
    val = val.toString().replace("0.", '.')
   else
    if val > 0
     val = "+#{val.toString()}"
    val
]



angular.module('UUID', []).factory 'UUID', [ ->

  s4 = ->
    Math.floor((1 + Math.random()) * 0x10000).toString(16).substring 1

  {
    newuuid: ->
      # http://www.ietf.org/rfc/rfc4122.txt
      s = []
      hexDigits = '0123456789abcdef'
      i = 0
      while i < 36
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1)
        i++
      s[14] = '4'
      # bits 12-15 of the time_hi_and_version field to 0010
      s[19] = hexDigits.substr(s[19] & 0x3 | 0x8, 1)
      # bits 6-7 of the clock_seq_hi_and_reserved to 01
      s[8] = s[13] = s[18] = s[23] = '-'
      s.join ''
    newguid: ->
      s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4()

  }
 ]



angular.module('Infoluence').directive 'fileModel', [
  '$parse'
  ($parse) ->
    {
      restrict: 'A'
      link: (scope, element, attrs) ->
        model = $parse(attrs.fileModel)
        modelSetter = model.assign
        element.bind 'change', ->
          scope.$apply ->
            modelSetter scope, element[0].files[0]
            return
          return
        return

    }
]

mod = undefined
mod = angular.module('infinite-scroll', [])
mod.directive 'infiniteScroll', [
  '$rootScope'
  '$window'
  '$timeout'
  ($rootScope, $window, $timeout) ->
    { link: (scope, elem, attrs) ->
      checkWhenEnabled = undefined
      handler = undefined
      scrollDistance = undefined
      scrollEnabled = undefined
      $window = angular.element($window)
      scrollDistance = 0
      if attrs.infiniteScrollDistance != null
        scope.$watch attrs.infiniteScrollDistance, (value) ->
          scrollDistance = parseInt(value, 10)
      scrollEnabled = true
      checkWhenEnabled = false
      if attrs.infiniteScrollDisabled != null
        scope.$watch attrs.infiniteScrollDisabled, (value) ->
          scrollEnabled = !value
          if scrollEnabled and checkWhenEnabled
            checkWhenEnabled = false
            return handler()
          return

      handler = ->
        # elementBottom = undefined
        # remaining = undefined
        # shouldScroll = undefined
        # windowBottom = undefined
        # windowBottom = $window.height() + $window.scrollTop()
        # elementBottom = elem.children().offset().top + elem.height()
        # remaining = elementBottom - windowBottom

        remaining = elem.children().height() + elem.children().offset().top - elem.height()

        shouldScroll = remaining <= elem.height() * scrollDistance

        if shouldScroll and scrollEnabled
          if $rootScope.$$phase
            return scope.$eval(attrs.infiniteScroll)
          else
            return scope.$apply(attrs.infiniteScroll)
        else if shouldScroll
          return checkWhenEnabled = true
        return

      elem.on 'scroll', handler
      scope.$on '$destroy', ->
        $window.off 'scroll', handler
      $timeout (->
        if attrs.infiniteScrollImmediateCheck
          if scope.$eval(attrs.infiniteScrollImmediateCheck)
            return handler()
        else
          return handler()
        return
      ), 0
 }
]


do ->

  mhScrollbar = ->
    {
      restrict: 'A'
      link: (scope, element, attrs) ->
        conf = getConf(attrs, scope)
        element.mCustomScrollbar conf
        return

    }

  getConf = (attrs, scope) ->
    confObj = {}
    for attr of attrs
      if attr.indexOf('mcs') == 0
        field = attr.charAt(3).toLowerCase() + attr.substring(4, attr.length)
        confObj[field] = convert(attrs[attr], scope)
    confObj

  convert = (input, scope) ->
    if input == undefined or input == null
      return null
    #numbers, booleans
    primary = primaryData(input, scope)
    if primary != null
      return primary
    #Object Json
    parsed = null
    try
      parser = JSON.parse
      if jQuery.parseJSON
        parser = jQuery.parseJSON
      parsed = parser(input)
      return primaryData(parsed, scope)
    catch e
      #String
      return input
    return

  primaryData = (input, scope) ->
    #Number
    temp = Number(input)
    if !isNaN(temp)
      return temp
    #Boolean
    if input == 'true' or input == 'false'
      if input == 'true'
        return true
      else
        return false
    #Object
    if angular.isObject(input) and !angular.isDate(input) and !angular.isArray(input)
      for field of input
        data = primaryData(input[field], scope)
        input[field] = if data != null then data else parseFunctions(input[field], scope)
        return input
    null

  parseFunctions = (input, scope) ->
    #Function - has the ()
    if input.indexOf('()') > 0
      splitted = input.split('.')
      parsedFunc = scope
      i = 0
      length = splitted.length
      while i < length - 1
        parsedFunc = parsedFunc[splitted[i]]
        i++
      last = splitted[splitted.length - 1].substring(0, splitted[splitted.length - 1].length - 2)
      return parsedFunc[last]
    null

  'use strict'
  angular.module('Nvest.scrollbar', []).directive 'mhScrollbar', mhScrollbar
  return

