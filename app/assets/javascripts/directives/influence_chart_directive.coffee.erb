


graph =
  'nodes': [
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
    {
      'name': 'Myriel'
    }
  ]
  'links': [
    {
      'source': 0
      'target': 1
      'value': 1
    }
    {
      'source': 0
      'target': 2
      'value': 1
    }
    {
      'source': 0
      'target': 3
      'value': 1
    }
    {
      'source': 0
      'target': 4
      'value': 1
    }
    {
      'source': 0
      'target': 5
      'value': 3
    }
    {
      'source': 0
      'target': 6
      'value': 1
    }
    {
      'source': 0
      'target': 7
      'value': 1
    }
    {
      'source': 0
      'target': 8
      'value': 2
    }
    {
      'source': 0
      'target': 9
      'value': 1
    }
    {
      'source': 5
      'target': 10
      'value': 1
    }
    {
      'source': 5
      'target': 11
      'value': 1
    }
  ]

# angular.module("Infoluence").service "detailPostInflunceChart", () ->
# 	return

# angular.module('Infoluence').directive 'timelinePost', ->

#  templateUrl: "directives/timeline_post.html"
#  #controller: "CommentBoxController"
#  restrict: 'E'
#  link: (scope, element, attrs) ->
#   return
angular.module('Infoluence').directive "detailPostInfluenceChart", [

	'$parse'
	($parse) ->

	 templateUrl: 'directives/detail_post_influence_chart.html'
	 restrict: 'E'
	 #replace: true


	 link: (scope, element, attrs) ->
	 	width = 300
			height = 300
			#color = d3.scale.category20()
			force = d3.layout.force().charge(-30).linkDistance(10).size([
			  width
			  height
			])

			svg = d3.select('#chartSVG').attr('width', width).attr('height', height)


			console.log graph
	  # if error
	  #   throw error
	  force.nodes(graph.nodes).links(graph.links).start()
	  link = svg.selectAll('.link').data(graph.links).enter().append('line').attr('class', 'link').style('stroke-width', (d) ->
	    Math.sqrt d.value
	  )
	  node = svg.selectAll('.node').data(graph.nodes).enter().append('circle').attr('class', 'node').attr('r', 1).style({"fill":"rgba(102, 153, 255,0.9)","filter": "url(#f2)","filter":"url(#f1)"})
	  node.append('title').text (d) ->
	    d.name
	  force.on 'tick', ->
	    link.attr('x1', (d) ->
	      d.source.x
	    ).attr('y1', (d) ->
	      d.source.y
	    ).attr('x2', (d) ->
	      d.target.x
	    ).attr 'y2', (d) ->
	      d.target.y
	    node.attr('cx', (d) ->
	      d.x
	    ).attr 'cy', (d) ->
	      d.y
	    return
	  return

	]
   