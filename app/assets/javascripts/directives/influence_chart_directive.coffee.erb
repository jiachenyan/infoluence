
angular.module('Infoluence').directive "detailPostInfluenceChart", [

	'$parse'
	($parse) ->

	 templateUrl: 'directives/detail_post_influence_chart.html'
	 restrict: 'E'
	 contoller: 'InfluenceChartController'


	 link: (scope, element, attrs) ->
	 	width = element[0].offsetWidth
			height = element[0].offsetHeight
			console.log width
			console.log height
			#color = d3.scale.category20()

   data = scope.post.graphData
   infId = scope.post.infId

   graph = 
    'nodes': []
    'links': []

   data.forEach (el) =>
    graph['nodes'].push el

   i = 0
   len = data.length

   while i < len

    j = 0

    while j < len

     if graph['nodes'][i][2] == graph['nodes'][j][0]

      link = 
       'source': j
       'target': i
       'value': 1


      graph['links'].push link
      break
     j++

    i++
   console.log graph
   len = data.length
  	charge = 60 * Math.exp(-len/200)

   # maxCharge = -100
   # minCharge = -5

   # charge = maxCharge/(1 + Math.pow(2.72,(-3*(data.length - 50))))
			# force = d3.layout.force().charge(charge).linkDistance(1).size([
			#   width
			#   height
			# ])
			force = d3.layout.force().charge(-charge).linkDistance(1).size([
			  width
			  height
			])
			#.linkStrength([2]).friction(0.5).linkDistance(1).charge(-20)


			#svg = d3.select('#chartSVG').attr('width', width).attr('height', height)
   chartId = "#chartSVG"
   console.log chartId


   svg = d3.select("#chartSVG")
    


	  # if error
	  #   throw error
	  force.nodes(graph.nodes).links(graph.links).start()
	  link = svg.selectAll('.link').data(graph.links).enter().append('line').attr('class', 'link').style('stroke-width', (d) ->
	    Math.sqrt d.value
	  )
	  node = svg.selectAll('.node').data(graph.nodes).enter().append('circle').attr('class', 'node').attr('r', 0.5).style({"fill":"rgba(102, 153, 255,0.9)","filter": "url(#f2)","filter":"url(#f1)"})
	  node.append('title').text (d) ->
	    d.name
	  force.on 'tick', ->
	    link.attr('x1', (d) ->
	      d.source.x
	    ).attr('y1', (d) ->
	      d.source.y
	    ).attr('x2', (d) ->
	      d.target.x
	    ).attr 'y2', (d) ->
	      d.target.y
	    node.attr('cx', (d) ->
	      d.x
	    ).attr 'cy', (d) ->
	      d.y
	    return
	  return

	]
   